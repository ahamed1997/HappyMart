/*
Deployment script for DB.HappyBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB.HappyBuy"
:setvar DefaultFilePrefix "DB.HappyBuy"
:setvar DefaultDataPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[sp_AddCart]...';


GO
ALTER PROCEDURE [dbo].[sp_AddCart]
		@CustomerId varchar (30),
		@ProductName varchar(100),
		@Quantity int
AS
BEGIN
	declare @Id varchar(10),@TempId int, @Count int,@ProductCount int,
	@ProductId varchar(50),@TotalPrice nvarchar(50),@TempPrice int;
	set @Count = (select count(*) from Cart)+1;
	set @Id = 'CR' + (FORMAT(@Count,'0000'))
	set @ProductId = (select Id from Product where Name = @ProductName);
	set @ProductCount = (select COUNT(*) from Cart where CustomerId = @CustomerId 
	AND ProductId = @ProductId);
	set @TotalPrice = (select Price from Product where Id = @ProductId);	
	IF(@ProductCount > 0)
	BEGIN
		UPDATE Cart set Quantity += @Quantity where ProductId = @ProductId;
		set @TempPrice = (SELECT CAST(@TotalPrice as int));
		set @TempPrice = @TempPrice * (select Quantity from Cart where ProcuctId = @ProductId);
		declare @money money = @TempPrice;
		set @TotalPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		UPDATE Cart set TotalPrice = @TotalPrice where ProductId = @ProductId;
	END
	ELSE IF (@ProductCount < 1)
	BEGIN
		INSERT INTO Cart values(@Id, @CustomerId,@ProductId,@TotalPrice,@Quantity)
	END
END
GO
PRINT N'Altering [dbo].[sp_InsertProduct]...';


GO
ALTER PROCEDURE [dbo].[sp_InsertProduct]
	@SubCategoryName varchar(50),
	@Name varchar(100),
	@Description nvarchar(MAX),
	@Specification nvarchar(MAX),
	@Options nvarchar(MAX),
	@Price nvarchar(50),
	@Brand varchar(50),
	@IsActive int,
	@Quantity int,
	@ImageURL varchar(200)

AS
BEGIN
	declare @money money = @Price, @TempSubCategoryId varchar(30),@Id varchar(50),
	@StockId varchar(50),@Count int, @TempPrice nvarchar(50),@ProductCount int
	set @TempSubCategoryId = (select Id from SubCategory where Name = @SubCategoryName)
	set @Count = (select count(*) from Product)+1;
	set @Id = 'P' + @TempSubCategoryId + 'SC' + (FORMAT(@Count,'00000'));
	set @ProductCount = (select count(1) from Product where Id = @Id)
	set @Count = (select count(*) from Stock)+1;
	set @StockId = 'SK' + (FORMAT(@Count,'00000'));

	IF(@ProductCount > 0)
	BEGIN
		set @TempPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		INSERT into Product values (@Id,@TempSubCategoryId,@Name,@Description,@Specification,@Options,@TempPrice,@Brand,@IsActive,@Quantity,@ImageURL);
		INSERT into Stock values (@StockId,@Id,@Quantity);
	END
	ELSE 
	BEGIN
		set @TempPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		UPDATE Product 
		set SubCategoryId = @TempSubCategoryId,
			Name = @Name,
			Description = @Description,
			Specification = @Specification,
			Options = @Options,
			Price = @TempPrice,
			Brand =@Brand,
			IsActive = @IsActive,
			Quantity=@Quantity,
			ImageURL= @ImageURL
		where Id = @Id;

		UPDATE Stock
		set ProductId = @Id,
			Quantity = @Quantity
		where 
			Id = @StockId;
	END
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO
create table Customer 
(
		Id varchar(30) primary key ,
		FirstName varchar(50), 
		LastName varchar(50),
		Mobile varchar(15),
		Email varchar(30),
		Password varchar(30),
		Street varchar(100),
		LandMark varchar(100),
		City varchar(30), 
		State varchar(30), 
		Zipcode varchar(10)
);

GO


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Payment 
(
		Id varchar(30) primary key, 
		CustomerId varchar(30),
		PaymentMode varchar(20),
		AmountPaid varchar(20),
		DateOfPayment datetime,
		FOREIGN KEY (CustomerId) REFERENCES Customer(Id)
);
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table ShippingAddress
(
		Id varchar(10) primary key,
		CustomerId varchar (30),
		Mobile varchar(15),
		Street varchar(100),
		LandMark varchar(100),
		City varchar(30), 
		State varchar(30), 
		Zipcode varchar(10),
		FOREIGN KEY (CustomerId) REFERENCES Customer(Id)
);
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Category 
(
		Id varchar(10) primary key,
		Name varchar(50)
);
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO
create table SubCategory 
(
		Id varchar(30) primary key,
		CategoryId varchar(10),
		Name varchar(100),
		FOREIGN KEY (CategoryId) REFERENCES Category(Id)
);
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Product 
(
		Id varchar(50) primary key,
		SubCategoryId varchar(30),
		Name varchar(100),
		Description nvarchar(MAX),
		Specification nvarchar(MAX),
		Options nvarchar(MAX),
		Price nvarchar(50) ,
		Brand varchar(50),
		IsActive int,
		Quantity int,
		ImageURL varchar(200),
		FOREIGN KEY (SubCategoryId) REFERENCES SubCategory(Id)
);
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Orders
(
		Id varchar(30) primary key,
		Quantity int,
		Price int,
		DateOrdered datetime,
		DateReceived datetime,
		Status varchar(20),
		CustomerId varchar (30),
		PaymentId varchar(30),
		ProductId varchar(50),
		AddressId varchar(10),
		FOREIGN KEY (CustomerId) REFERENCES Customer(Id),
		FOREIGN KEY (PaymentId) REFERENCES Payment(Id),
		FOREIGN KEY (ProductId) REFERENCES Product(Id),
		FOREIGN KEY (AddressId) REFERENCES ShippingAddress(Id)
);
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Cart
(
		Id varchar(20) primary key,
		CustomerId varchar (30),
		ProductId varchar(50),
		TotalPrice nvarchar(MAX),
		Quantity int,
		FOREIGN KEY (CustomerId) REFERENCES Customer(Id),
		FOREIGN KEY (ProductId) REFERENCES Product(Id)
);
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
create table Stock 
(
		Id varchar(50),
		ProductId varchar(50),
		Quantity int,FOREIGN KEY (ProductId) REFERENCES Product(Id)
);
GO

GO
PRINT N'Update complete.';


GO
