/*
Deployment script for DB.HappyBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB.HappyBuy"
:setvar DefaultFilePrefix "DB.HappyBuy"
:setvar DefaultDataPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Cart]...';


GO
CREATE TABLE [dbo].[Cart] (
    [CartId]         INT             NOT NULL,
    [CartCustomerId] INT             NOT NULL,
    [CartProductId]  INT             NOT NULL,
    [CartPrice]      DECIMAL (10, 2) NOT NULL,
    [CartQuantity]   INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([CartId] ASC)
);


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [CategoryId]   INT          NOT NULL,
    [CategoryName] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustomerId]        INT              NOT NULL,
    [CustomerFirstName] VARCHAR (50)     NOT NULL,
    [CustomerLastName]  VARCHAR (50)     NULL,
    [CustomerMobile]    VARCHAR (15)     NOT NULL,
    [CustomerEmail]     NVARCHAR (30)    NOT NULL,
    [CustomerPassword]  VARBINARY (1000) NOT NULL,
    PRIMARY KEY CLUSTERED ([CustomerId] ASC),
    CONSTRAINT [Uk_Email] UNIQUE NONCLUSTERED ([CustomerEmail] ASC)
);


GO
PRINT N'Creating [dbo].[OrderDetails]...';


GO
CREATE TABLE [dbo].[OrderDetails] (
    [OrderDetailsId]        INT          NOT NULL,
    [OrderDetailsProductId] INT          NOT NULL,
    [OrderDetailsOrdersId]  INT          NOT NULL,
    [OrderDetailsQuantity]  INT          NOT NULL,
    [OrderDetailsPrice]     DECIMAL (18) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderDetailsId] ASC)
);


GO
PRINT N'Creating [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [OrdersId]                   INT      NOT NULL,
    [OrdersCustomerId]           INT      NOT NULL,
    [OrdersShippingAddressId]    INT      NOT NULL,
    [OrdersDateOfOrder]          DATETIME NOT NULL,
    [OrdersOrderStatusId]        INT      NOT NULL,
    [OrdersDateOfOrderCompleted] DATETIME NULL,
    PRIMARY KEY CLUSTERED ([OrdersId] ASC)
);


GO
PRINT N'Creating [dbo].[OrderStatus]...';


GO
CREATE TABLE [dbo].[OrderStatus] (
    [OrdersStatusId]    INT          NOT NULL,
    [OrdersStatusState] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrdersStatusId] ASC)
);


GO
PRINT N'Creating [dbo].[Payment]...';


GO
CREATE TABLE [dbo].[Payment] (
    [PaymentId]      INT NOT NULL,
    [PaymentOrderId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([PaymentId] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentDetails]...';


GO
CREATE TABLE [dbo].[PaymentDetails] (
    [PaymentDetailsId]             INT              NOT NULL,
    [PaymentDetailsPaymentId]      INT              NOT NULL,
    [PaymentDetailsPaymentModeId]  INT              NOT NULL,
    [PaymentDetailsCardHolderName] VARCHAR (50)     NULL,
    [PaymentDetailsCardNumber]     VARBINARY (1000) NULL,
    [PaymentDetailsExpiryMonth]    CHAR (2)         NULL,
    [PaymentDetailsExpiryYear]     CHAR (4)         NULL,
    [PaymentDetailsCVV]            CHAR (3)         NULL,
    [PaymentDetailsDateOfPayment]  DATETIME         NOT NULL,
    [PaymentDetailsAmountPaid]     DECIMAL (10, 2)  NOT NULL,
    PRIMARY KEY CLUSTERED ([PaymentDetailsId] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentMode]...';


GO
CREATE TABLE [dbo].[PaymentMode] (
    [PaymentModeId]            INT          NOT NULL,
    [PaymentModeModeOfPayment] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([PaymentModeId] ASC)
);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [ProductId]            INT             NOT NULL,
    [ProductSubCategoryId] INT             NOT NULL,
    [ProductName]          VARCHAR (100)   NOT NULL,
    [ProductDescription]   NVARCHAR (1000) NOT NULL,
    [ProductSpecification] NVARCHAR (MAX)  NOT NULL,
    [ProductOptions]       NVARCHAR (MAX)  NOT NULL,
    [ProductPrice]         DECIMAL (10, 2) NOT NULL,
    [ProductBrand]         VARCHAR (50)    NOT NULL,
    [ProductIsActive]      BIT             NOT NULL,
    [ProductQuantity]      INT             NOT NULL,
    [ProductImageURL]      VARCHAR (200)   NOT NULL,
    PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingAddress]...';


GO
CREATE TABLE [dbo].[ShippingAddress] (
    [ShippingAddressId]         INT           NOT NULL,
    [ShippingAddressCustomerId] INT           NOT NULL,
    [ShippingAddressMobile]     VARCHAR (15)  NOT NULL,
    [ShippingAddressStreet]     VARCHAR (100) NOT NULL,
    [ShippingAddressLandMark]   VARCHAR (100) NOT NULL,
    [ShippingAddressCity]       VARCHAR (30)  NOT NULL,
    [ShippingAddressState]      VARCHAR (30)  NOT NULL,
    [ShippingAddressZipcode]    VARCHAR (10)  NOT NULL,
    PRIMARY KEY CLUSTERED ([ShippingAddressId] ASC)
);


GO
PRINT N'Creating [dbo].[SubCategory]...';


GO
CREATE TABLE [dbo].[SubCategory] (
    [SubCategoryId]         INT           NOT NULL,
    [SubCategoryCategoryId] INT           NOT NULL,
    [SubCategoryName]       VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([SubCategoryId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([CartCustomerId]) REFERENCES [dbo].[Customer] ([CustomerId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([CartProductId]) REFERENCES [dbo].[Product] ([ProductId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderDetails]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD FOREIGN KEY ([OrderDetailsOrdersId]) REFERENCES [dbo].[Orders] ([OrdersId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderDetails]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD FOREIGN KEY ([OrderDetailsProductId]) REFERENCES [dbo].[Product] ([ProductId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([OrdersCustomerId]) REFERENCES [dbo].[Customer] ([CustomerId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([OrdersOrderStatusId]) REFERENCES [dbo].[OrderStatus] ([OrdersStatusId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([OrdersShippingAddressId]) REFERENCES [dbo].[ShippingAddress] ([ShippingAddressId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Payment]...';


GO
ALTER TABLE [dbo].[Payment]
    ADD FOREIGN KEY ([PaymentOrderId]) REFERENCES [dbo].[Orders] ([OrdersId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PaymentDetails]...';


GO
ALTER TABLE [dbo].[PaymentDetails]
    ADD FOREIGN KEY ([PaymentDetailsPaymentId]) REFERENCES [dbo].[Payment] ([PaymentId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PaymentDetails]...';


GO
ALTER TABLE [dbo].[PaymentDetails]
    ADD FOREIGN KEY ([PaymentDetailsPaymentModeId]) REFERENCES [dbo].[PaymentMode] ([PaymentModeId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD FOREIGN KEY ([ProductSubCategoryId]) REFERENCES [dbo].[SubCategory] ([SubCategoryId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[ShippingAddress]...';


GO
ALTER TABLE [dbo].[ShippingAddress]
    ADD FOREIGN KEY ([ShippingAddressCustomerId]) REFERENCES [dbo].[Customer] ([CustomerId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[SubCategory]...';


GO
ALTER TABLE [dbo].[SubCategory]
    ADD FOREIGN KEY ([SubCategoryCategoryId]) REFERENCES [dbo].[Category] ([CategoryId]);


GO
PRINT N'Creating [dbo].[USP_AddCart]...';


GO
CREATE PROCEDURE [dbo].[USP_AddCart]
	@CartCustomerId INT,
	@CartProductId INT,
	@CartQuantity INT
AS
BEGIN
	DECLARE @Id INT, @ProductCount INT,@CartPrice DECIMAL;
	set @ProductCount = (SELECT COUNT(*) from Cart WHERE CartCustomerId = @CartCustomerId AND CartProductId = @CartProductId);
	set @CartPrice = (SELECT ProductPrice from Product WHERE ProductId = @CartProductId);
	IF(@ProductCount > 0)
	BEGIN
		UPDATE Cart set CartQuantity += @CartQuantity WHERE CartCustomerId = @CartCustomerId AND CartProductId = @CartProductId;
		UPDATE Cart set CartPrice = @CartPrice * (SELECT CartQuantity from Cart where CartCustomerId = @CartCustomerId AND CartProductId = @CartProductId) WHERE CartProductId = @CartProductId;
	END
	ELSE IF (@ProductCount < 1)
	BEGIN
	set @Id = (SELECT COUNT(*) from Cart)+1;
		INSERT INTO Cart values(@Id, @CartCustomerId,@CartProductId,@CartPrice,@CartQuantity)
	END
END
GO
PRINT N'Creating [dbo].[USP_AddShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[USP_AddShippingAddress]
		@ShippingAddressCustomerId INT,
		@ShippingAddressMobile varchar(15),
		@ShippingAddressStreet varchar(100),
		@ShippingAddressLandMark varchar(100),
		@ShippingAddressCity varchar(30), 
		@ShippingAddressState varchar(30), 
		@ShippingAddressZipcode varchar(10)

AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT count(*) from ShippingAddress)+1;
	INSERT into ShippingAddress values(@Id,@ShippingAddressCustomerId,@ShippingAddressMobile,@ShippingAddressStreet,@ShippingAddressLandMark,@ShippingAddressCity,@ShippingAddressState,@ShippingAddressZipcode);
	RETURN (SELECT MAX(ShippingAddressId) from ShippingAddress);
END
GO
PRINT N'Creating [dbo].[USP_CustomerRegister]...';


GO
CREATE PROCEDURE [dbo].[USP_CustomerRegister]
	@CustomerFirstname varchar(50),
	@CustomerLastname varchar(50),
	@CustomerMobile varchar(15),
	@CustomerEmail varchar(30),
	@CustomerPassword varchar(30)
AS
BEGIN
	DECLARE @Id INT,@encryptedPassword varbinary(4000); 
	set @Id = (SELECT COUNT(*) from Customer)+1;
	set @encryptedPassword = EncryptByPassPhrase('key', @CustomerPassword)

	INSERT Customer values (@Id,@CustomerFirstname,@CustomerLastname,@CustomerMobile,@CustomerEmail,@encryptedPassword);
	SELECT MAX(CustomerId) from Customer;
END
GO
PRINT N'Creating [dbo].[USP_GetCartItems]...';


GO
CREATE PROCEDURE [dbo].[USP_GetCartItems]
	@CartCustomerId INT
AS
	BEGIN
		SELECT 
		C.CartId,
		C.CartPrice,
		C.CartQuantity,
		C.CartCustomerId,
		C.CartProductId,
		P.ProductId,
		P.ProductName,
		P.ProductBrand,
		P.ProductDescription,
		P.ProductSpecification,
		P.ProductImageURL,
		P.ProductIsActive,
		P.ProductOptions,
		P.ProductPrice,
		P.ProductQuantity,
		P.ProductSubCategoryId
		from Cart C JOIN Product P on P.ProductId = C.CartProductId 
		WHERE C.CartProductId in (SELECT ProductId from Cart 
		where CartCustomerId = @CartCustomerId);
END
GO
PRINT N'Creating [dbo].[USP_GetCustomerDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_GetCustomerDetails]
	@CustomerId int
AS
BEGIN
	SELECT 
		CustomerId, 
		CustomerFirstName, 
		CustomerLastName,
		CustomerMobile,
		CustomerEmail
	    from Customer where CustomerId = @CustomerId;	
END
GO
PRINT N'Creating [dbo].[USP_GetProductDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_GetProductDetails]
	@ProductName varchar(100)
AS
BEGIN
	IF((SELECT COUNT(*) FROM Category WHERE CategoryName LIKE '%'+@ProductName+'%') > 0)
		BEGIN
			SELECT 
				P.ProductId,
				P.ProductName,
				P.ProductDescription,
				P.ProductSpecification,
				P.ProductOptions,
				P.ProductPrice,
				P.ProductBrand,
				P.ProductQuantity,
				P.ProductImageURL
			FROM Product P JOIN SubCategory SC ON P.ProductSubCategoryId = SC.SubCategoryId 
			JOIN Category C on SC.SubCategoryId = C.CategoryId WHERE C.CategoryName  LIKE '%'+@ProductName+'%';
		END

	ELSE IF((SELECT COUNT(*) FROM SubCategory WHERE SubCategoryName LIKE '%'+@ProductName+'%')>0)
		BEGIN
			SELECT 
				P.ProductId,
				P.ProductName,
				P.ProductDescription,
				P.ProductSpecification,
				P.ProductOptions,
				P.ProductPrice,
				P.ProductBrand,
				P.ProductQuantity,
				P.ProductImageURL
			FROM Product P JOIN SubCategory SC ON 
			P.ProductSubCategoryId = SC.SubCategoryId WHERE SC.SubCategoryName LIKE '%'+@ProductName+'%';
		END

	ELSE IF((SELECT COUNT(*) FROM Product WHERE ProductName LIKE '%'+@ProductName+'%')>0)
		BEGIN
			SELECT 
				P.ProductId,
				P.ProductName,
				P.ProductDescription,
				P.ProductSpecification,
				P.ProductOptions,
				P.ProductPrice,
				P.ProductBrand,
				P.ProductQuantity,
				P.ProductImageURL
			FROM Product P WHERE ProductName LIKE '%'+@ProductName+'%';
		END
END
GO
PRINT N'Creating [dbo].[USP_GetShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[USP_GetShippingAddress]
	@ShippingAddressCustomerId INT
AS
BEGIN
	SELECT 
		ShippingAddressId,
		ShippingAddressCustomerId,
		ShippingAddressMobile,
		ShippingAddressStreet,
		ShippingAddressLandMark,
		ShippingAddressCity,
		ShippingAddressState,
		ShippingAddressZipcode
	from ShippingAddress 
	WHERE ShippingAddressCustomerId = @ShippingAddressCustomerId;
END
GO
PRINT N'Creating [dbo].[USP_InsertCategory]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertCategory]
	@CategoryName varchar(50)
AS
BEGIN
	DECLARE @Id INT;
	select @Id = (SELECT COUNT(*) FROM Category)+1
	INSERT INTO Category values( @Id , @CategoryName);
	SELECT MAX(CategoryId) from Category;
END
GO
PRINT N'Creating [dbo].[USP_InsertOrderStatusTable]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertOrderStatusTable]
	@OrdersState varchar(20)
AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT COUNT(*) from OrderStatus)+1;
	INSERT into OrderStatus values (@Id,@OrdersState);
	select Max(OrdersStatusId) from OrderStatus;
END
GO
PRINT N'Creating [dbo].[USP_InsertProduct]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertProduct]	
	@ProductSubCategoryId INT,
	@ProductName varchar(100),
	@ProductDescription nvarchar(1000),
	@ProductSpecification nvarchar(MAX),
	@ProductOptions nvarchar(MAX),
	@ProductPrice DECIMAL(10,2),
	@ProductBrand varchar(50),
	@ProductIsActive int,
	@ProductQuantity int,
	@ProductImageURL varchar(200)

AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT COUNT(*) from Product)+1;
	INSERT into Product values (@Id,@ProductSubCategoryId,@ProductName,@ProductDescription,@ProductSpecification,@ProductOptions,@ProductPrice,@ProductBrand,@ProductIsActive,@ProductQuantity,@ProductImageURL);
	select Max(ProductId) from Product;
END
GO
PRINT N'Creating [dbo].[USP_InsertSubCategory]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertSubCategory]
	@SubCategoryCategoryId INT,
	@SubCategoryName varchar(100)
AS
BEGIN
	DECLARE @Id INT,@Count INT;
	set @Id = (select COUNT(*) from SubCategory)+1;
	INSERT INTO SubCategory values( @Id , @SubCategoryCategoryId, @SubCategoryName);
	select Max(SubCategoryId) from SubCategory
END
GO
PRINT N'Creating [dbo].[USP_LogInValidation]...';


GO
CREATE PROCEDURE [dbo].[USP_LogInValidation]
	@CustomerEmail varchar(30),
	@CustomerPassword varchar(30)
AS
BEGIN
	SELECT
		CustomerId,
		CustomerFirstName,
		CustomerLastName,
		CustomerMobile,
		CustomerEmail
	from Customer WHERE CustomerEmail = @CustomerEmail AND 
	(select convert(nvarchar(100),DecryptByPassPhrase('key', CustomerPassword ))) = @CustomerPassword
END
GO
PRINT N'Creating [dbo].[USP_MakePayment]...';


GO
CREATE PROCEDURE [dbo].[USP_MakePayment]
	@OrderDetailsProductId  INT ,
	@OrderDetailsOrdersId INT ,
	@OrderDetailsQuantity INT ,
	@OrderDetailsPrice DECIMAL
AS
BEGIN
	DECLARE @Count int;
	set @Count = (SELECT COUNT(*) from OrderDetails)+1;
	INSERT into OrderDetails  values (@Count,@OrderDetailsProductId,@OrderDetailsOrdersId,@OrderDetailsQuantity,@OrderDetailsPrice);
	SELECT Max(OrderDetailsId) from OrderDetails;
END
GO
PRINT N'Creating [dbo].[USP_ModifyOrdersStatusTable]...';


GO
CREATE PROCEDURE [dbo].[USP_ModifyOrdersStatusTable]
	@OrdersStatusId INT,
	@OrdersStatusState varchar(20)

AS
BEGIN
	UPDATE OrderStatus set OrdersStatusState = @OrdersStatusState where OrdersStatusId = @OrdersStatusId;
	SELECT OrdersStatusId from OrderStatus where OrdersStatusId = @OrdersStatusId;
END
GO
PRINT N'Creating [dbo].[USP_PlaceOrder]...';


GO
CREATE PROCEDURE [dbo].[USP_PlaceOrder]
	@OrdersCustomerId int,
	@OrdersShippingAddressId int,
	@OrdersOrderStatusId int,
	@PaymentDetailsPaymentModeId int,
	@PaymentDetailsCardNumber VARCHAR(50),
	@PaymentDetailsCardHolderName varchar(50),
	@PaymentDetailsExpiryMonth char(2),
	@PaymentDetailsExpiryYear char(4) ,
	@PaymentDetailsCVV char(3),
	@OrderDetailsPrice Decimal
AS
BEGIN
	DECLARE 
	@OrderId INT, 
	@OrderDetailsId INT,
	@CurrentDate DATETIME,
	@PaymentId int,
	@PaymentDetailsId int,
	@encryptedPaymentDetailsCardNumber varbinary(4000);

	set @OrderId = (SELECT COUNT(*) from Orders)+1;
	set @CurrentDate = (Select CONVERT(varchar,GETDATE(),103) as [DD/MM/YYYY]);
	INSERT into Orders values (@OrderId,@OrdersCustomerId,@OrdersShippingAddressId,@CurrentDate,@OrdersOrderStatusId,NULL);
	
	set @PaymentId = (SELECT COUNT(*) from Payment)+1;
	INSERT into Payment values(@PaymentId,@OrderId);

	IF(@PaymentDetailsPaymentModeId = 2)
	BEGIN
		set @PaymentDetailsId = (SELECT COUNT(*) from PaymentDetails)+1;
		set @encryptedPaymentDetailsCardNumber = (SELECT CONVERT(varbinary(max),@PaymentDetailsCardNumber));
		set @encryptedPaymentDetailsCardNumber = EncryptByPassPhrase('key', @PaymentDetailsCardNumber);

		INSERT into PaymentDetails values(
		@PaymentDetailsId,
		@PaymentId,
		@PaymentDetailsPaymentModeId,
		@encryptedPaymentDetailsCardNumber,
		@PaymentDetailsCardHolderName,
		@PaymentDetailsExpiryMonth,
		@PaymentDetailsExpiryYear,
		@PaymentDetailsCVV,
		@CurrentDate,
		@OrderDetailsPrice
		);
	
	END
	ELSE IF (@PaymentDetailsPaymentModeId = 1)
	BEGIN
		set @PaymentDetailsId = (SELECT COUNT(*) from PaymentDetails)+1;
		INSERT into PaymentDetails values(
		@PaymentDetailsId,
		@PaymentId,
		@PaymentDetailsPaymentModeId,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@CurrentDate,
		@OrderDetailsPrice
		);
	END
END
GO
PRINT N'Creating [dbo].[USP_RemoveCartItems]...';


GO
CREATE PROCEDURE [dbo].[USP_RemoveCartItems]
	@CartId INT
AS
BEGIN
	DECLARE @CartCount INT;

	set @CartCount = (SELECT COUNT(*) from Cart);

	DELETE from Cart WHERE CartId = @CartId;

	while(@CartId <= @CartCount)
	BEGIN
	UPDATE Cart set CartId = @CartId WHERE CartId = @CartId+1;
	set @CartId = @CartId + 1;
	END

END
GO
PRINT N'Creating [dbo].[USP_UpdateCartQuantity]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateCartQuantity]
	@CartId INT,
	@CartQuantity INT
AS
BEGIN
	DECLARE @CartProductCount INT,@StockCount INT,@CartCount INT;
	set @CartProductCount = (SELECT CartQuantity from Cart WHERE CartId = @CartId);
	set @StockCount = (SELECT P.ProductQuantity from Product P JOIN Cart C on P.ProductId = C.CartProductId  where C.CartId  = @CartId);


	IF(@CartProductCount = @StockCount)
	BEGIN
		RETURN @CartProductCount;
	END

	IF(@CartQuantity > @CartProductCount)
	BEGIN
		UPDATE Cart set CartQuantity = CartQuantity + 1 WHERE CartId = @CartId;
		UPDATE Cart set CartPrice = 
		(SELECT P.ProductPrice from Product P JOIN Cart C on P.ProductId = C.CartProductId where C.CartId = @CartId) * 
		(SELECT CartQuantity from Cart where CartId = @CartId);
		SELECT CartQuantity from Cart WHERE CartId = @CartId;
	END

	IF(@CartQuantity < @CartProductCount)
	BEGIN
		IF((SELECT CartQuantity from Cart WHERE CartId = @CartId)=1)
		DELETE FROM Cart WHERE CartId = @CartId;
		set @CartProductCount = @CartId;
		set @CartCount = (SELECT COUNT(*) from Cart)
		WHILE(@CartProductCount <= @CartCount)
			BEGIN
				UPDATE Cart set CartId = @CartProductCount WHERE CartId = @CartProductCount +1;
				set @CartProductCount = @CartProductCount +1;
			END
		RETURN 0
		END
		ELSE IF((SELECT CartQuantity from Cart WHERE CartId = @CartId)>1)
		BEGIN
			UPDATE Cart set CartQuantity = CartQuantity - 1 WHERE CartId = @CartId;
			SELECT CartQuantity from Cart WHERE CartId = @CartId;
		END
	END


RETURN 0
GO
PRINT N'Creating [dbo].[USP_UpdateProductDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateProductDetails]
	@ProductId INT,
	@ProductSubCategoryName varchar(50),
	@ProductName varchar(100),
	@ProductDescription nvarchar(1000),
	@ProductSpecification nvarchar(MAX),
	@ProductOptions nvarchar(MAX),
	@ProductPrice DECIMAL(10,2),
	@ProductBrand varchar(50),
	@ProductIsActive int,
	@ProductQuantity int,
	@ProductImageURL varchar(200)
AS
BEGIN
	DECLARE @SubCategoryId INT;
	set @SubCategoryId = (SELECT SubCategoryId from SubCategory where SubCategoryName = @ProductSubCategoryName);
	UPDATE Product 
			set ProductSubCategoryId = @SubCategoryId,
				ProductName = @ProductName,
				ProductDescription = @ProductDescription,
				ProductSpecification = @ProductSpecification,
				ProductOptions = @ProductOptions,
				ProductPrice = @ProductPrice,
				ProductBrand = @ProductBrand,
				ProductIsActive = @ProductIsActive,
				ProductQuantity = @ProductQuantity,
				ProductImageURL= @ProductImageURL
			WHERE ProductId = @ProductId;
			SELECT ProductId from Product where ProductId = @ProductId;
END
GO
PRINT N'Creating [dbo].[USP_UpdateShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateShippingAddress]
	@ShippingAddressId INT,
	@ShippingAddressCustomerId INT,
	@ShippingAddressMobile varchar(15),
	@ShippingAddressStreet varchar(100),
	@ShippingAddressLandMark varchar(100),
	@ShippingAddressCity varchar(30), 
	@ShippingAddressState varchar(30), 
	@ShippingAddressZipcode varchar(10)
AS
BEGIN
	UPDATE ShippingAddress
		set ShippingAddressCustomerId = @ShippingAddressCustomerId,
			ShippingAddressMobile = @ShippingAddressMobile,
			ShippingAddressStreet = @ShippingAddressStreet,
			ShippingAddressLandMark = @ShippingAddressLandMark,
			ShippingAddressCity = @ShippingAddressCity,
			ShippingAddressState =@ShippingAddressState,
			ShippingAddressZipcode = @ShippingAddressZipcode
			WHERE 
			ShippingAddressId = @ShippingAddressId;
	select ShippingAddressId from ShippingAddress where ShippingAddressId = @ShippingAddressId;
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
