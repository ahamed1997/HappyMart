/*
Deployment script for DB.HappyBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB.HappyBuy"
:setvar DefaultFilePrefix "DB.HappyBuy"
:setvar DefaultDataPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Cart]...';


GO
CREATE TABLE [dbo].[Cart] (
    [Id]         INT             NOT NULL,
    [CustomerId] INT             NOT NULL,
    [ProductId]  INT             NOT NULL,
    [Price]      DECIMAL (10, 2) NOT NULL,
    [Quantity]   INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]   INT          NOT NULL,
    [Name] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [Id]        INT           NOT NULL,
    [FirstName] VARCHAR (50)  NOT NULL,
    [LastName]  VARCHAR (50)  NULL,
    [Mobile]    VARCHAR (15)  NOT NULL,
    [Email]     NVARCHAR (30) NOT NULL,
    [Password]  VARCHAR (30)  NOT NULL,
    [Street]    VARCHAR (100) NOT NULL,
    [LandMark]  VARCHAR (100) NOT NULL,
    [City]      VARCHAR (30)  NOT NULL,
    [State]     VARCHAR (30)  NOT NULL,
    [Zipcode]   CHAR (6)      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [Uk_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[OrderDetails]...';


GO
CREATE TABLE [dbo].[OrderDetails] (
    [Id]        INT          NOT NULL,
    [ProductId] INT          NOT NULL,
    [OrderId]   INT          NOT NULL,
    [Quantity]  INT          NOT NULL,
    [Price]     DECIMAL (18) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [Id]                    INT          NOT NULL,
    [CustomerId]            INT          NOT NULL,
    [AddressId]             INT          NOT NULL,
    [DateOfOrder]           VARCHAR (15) NOT NULL,
    [OrderStatusId]         INT          NOT NULL,
    [DateOfOrderDispatched] VARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[OrderStatus]...';


GO
CREATE TABLE [dbo].[OrderStatus] (
    [Id]     INT          NOT NULL,
    [Status] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Payment]...';


GO
CREATE TABLE [dbo].[Payment] (
    [Id]      INT NOT NULL,
    [OrderId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentDetails]...';


GO
CREATE TABLE [dbo].[PaymentDetails] (
    [Id]             INT             NOT NULL,
    [PaymentId]      INT             NOT NULL,
    [PaymentModeId]  INT             NOT NULL,
    [CardHolderName] VARCHAR (50)    NOT NULL,
    [CardNumber]     INT             NOT NULL,
    [ExpiryMonth]    CHAR (2)        NOT NULL,
    [ExpiryYear]     CHAR (4)        NOT NULL,
    [CVV]            CHAR (3)        NOT NULL,
    [DateOfPayment]  DATETIME        NOT NULL,
    [AmountPaid]     DECIMAL (10, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[PaymentMode]...';


GO
CREATE TABLE [dbo].[PaymentMode] (
    [Id]            INT          NOT NULL,
    [ModeOfPayment] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Id]            INT             NOT NULL,
    [SubCategoryId] INT             NOT NULL,
    [Name]          VARCHAR (100)   NOT NULL,
    [Description]   NVARCHAR (1000) NOT NULL,
    [Specification] NVARCHAR (MAX)  NOT NULL,
    [Options]       NVARCHAR (MAX)  NOT NULL,
    [Price]         DECIMAL (10, 2) NOT NULL,
    [Brand]         VARCHAR (50)    NOT NULL,
    [IsActive]      BIT             NOT NULL,
    [Quantity]      INT             NOT NULL,
    [ImageURL]      VARCHAR (200)   NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingAddress]...';


GO
CREATE TABLE [dbo].[ShippingAddress] (
    [Id]         INT           NOT NULL,
    [CustomerId] INT           NOT NULL,
    [Mobile]     VARCHAR (15)  NOT NULL,
    [Street]     VARCHAR (100) NOT NULL,
    [LandMark]   VARCHAR (100) NOT NULL,
    [City]       VARCHAR (30)  NOT NULL,
    [State]      VARCHAR (30)  NOT NULL,
    [Zipcode]    VARCHAR (10)  NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SubCategory]...';


GO
CREATE TABLE [dbo].[SubCategory] (
    [Id]         INT           NOT NULL,
    [CategoryId] INT           NOT NULL,
    [Name]       VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderDetails]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderDetails]...';


GO
ALTER TABLE [dbo].[OrderDetails]
    ADD FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([OrderStatusId]) REFERENCES [dbo].[OrderStatus] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[ShippingAddress] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Payment]...';


GO
ALTER TABLE [dbo].[Payment]
    ADD FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PaymentDetails]...';


GO
ALTER TABLE [dbo].[PaymentDetails]
    ADD FOREIGN KEY ([PaymentId]) REFERENCES [dbo].[Payment] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PaymentDetails]...';


GO
ALTER TABLE [dbo].[PaymentDetails]
    ADD FOREIGN KEY ([PaymentModeId]) REFERENCES [dbo].[PaymentMode] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD FOREIGN KEY ([SubCategoryId]) REFERENCES [dbo].[SubCategory] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[ShippingAddress]...';


GO
ALTER TABLE [dbo].[ShippingAddress]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[SubCategory]...';


GO
ALTER TABLE [dbo].[SubCategory]
    ADD FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating [dbo].[USP_AddCart]...';


GO
CREATE PROCEDURE [dbo].[USP_AddCart]
	@CustomerId INT,
	@ProductId INT,
	@Quantity INT
AS
BEGIN
	DECLARE @Id INT, @ProductCount INT,@Price MONEY;
	set @ProductCount = (SELECT COUNT(*) from Cart WHERE CustomerId = @CustomerId AND ProductId = @ProductId);
	set @Price = (SELECT Price from Product WHERE Id = @ProductId);
	IF(@ProductCount > 0)
	BEGIN
		UPDATE Cart set Quantity += @Quantity WHERE CustomerId = @CustomerId AND ProductId = @ProductId;
		UPDATE Cart set Price = @Price * (SELECT Quantity from Cart where CustomerId = @CustomerId AND ProductId = @ProductId) WHERE ProductId = @ProductId;
	END
	ELSE IF (@ProductCount < 1)
	BEGIN
	set @Id = (SELECT COUNT(*) from Cart)+1;
		INSERT INTO Cart values(@Id, @CustomerId,@ProductId,@Price,@Quantity)
	END
END
GO
PRINT N'Creating [dbo].[USP_AddShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[USP_AddShippingAddress]
		@CustomerId INT,
		@Mobile varchar(15),
		@Street varchar(100),
		@LandMark varchar(100),
		@City varchar(30), 
		@State varchar(30), 
		@Zipcode varchar(10)

AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT count(*) from ShippingAddress)+1;
	INSERT into ShippingAddress values(@Id,@CustomerId,@Mobile,@Street,@landMark,@City,@State,@Zipcode);
	RETURN (SELECT MAX(Id) from ShippingAddress);
END
GO
PRINT N'Creating [dbo].[USP_CustomerRegister]...';


GO
CREATE PROCEDURE [dbo].[USP_CustomerRegister]
	@Firstname varchar(50),
	@Lastname varchar(50),
	@Mobile varchar(15),
	@Email varchar(30),
	@Password varchar(30),
	@Street varchar(100),
	@Landmark varchar(100),
	@City varchar(30),
	@State varchar(30),
	@Zipcode varchar(10)
AS
BEGIN
	DECLARE @Id INT; 
	set @Id = (SELECT COUNT(*) from Customer)+1;
	INSERT Customer values (@Id,@Firstname,@Lastname,@Mobile,@Email,@Password,@Street,@Landmark,@City,@State,@Zipcode);
RETURN SELECT MAX(Id) from Customer;
END
GO
PRINT N'Creating [dbo].[USP_GetCartItems]...';


GO
CREATE PROCEDURE [dbo].[USP_GetCartItems]
	@CustomerId INT
AS
	BEGIN
		SELECT 
		C.Id,
		C.Price,
		C.Quantity,
		C.CustomerId,
		C.ProductId,
		P.Id,
		P.Name,
		P.Brand,
		P.Description,
		P.Specification,
		P.ImageURL,
		P.IsActive,
		P.Options,
		P.Price,
		P.Quantity,
		P.SubCategoryId
		from Cart C JOIN Product P on P.Id = C.ProductId 
		WHERE C.ProductId in (SELECT ProductId from Cart 
		where CustomerId = @CustomerId);
END
GO
PRINT N'Creating [dbo].[USP_GetCustomerDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_GetCustomerDetails]
	@Id int
AS
BEGIN
	SELECT 
		Id, 
		FirstName, 
		LastName,
		Mobile,
		Email,
		Street,
		LandMark,
		City,
		State,
		Zipcode  from Customer where Id = @Id;	
END
GO
PRINT N'Creating [dbo].[USP_GetProductDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_GetProductDetails]
	@Name varchar(100)
AS
BEGIN
	IF((SELECT COUNT(*) FROM Category WHERE Name LIKE '%'+@Name+'%') > 0)
		BEGIN
			SELECT 
				P.Id,
				P.Name,
				P.Description,
				P.Specification,
				P.Options,
				P.Price,
				P.Brand,
				P.Quantity,
				P.ImageURL
			FROM Product P JOIN SubCategory SC ON P.SubCategoryId = SC.Id 
			JOIN Category C on SC.CategoryId = C.Id WHERE C.Name  LIKE '%'+@Name+'%';
		END

	ELSE IF((SELECT COUNT(*) FROM SubCategory WHERE Name LIKE '%'+@Name+'%')>0)
		BEGIN
			SELECT 
				P.Id,
				P.Name,
				P.Description,
				P.Specification,
				P.Options,
				P.Price,
				P.Brand,
				P.Quantity,
				P.ImageURL
			FROM Product P JOIN SubCategory SC ON 
			P.SubCategoryId = SC.Id WHERE SC.Name LIKE '%'+@Name+'%';
		END

	ELSE IF((SELECT COUNT(*) FROM Product WHERE Name LIKE '%'+@Name+'%')>0)
		BEGIN
			SELECT 
				P.Id,
				P.Name,
				P.Description,
				P.Specification,
				P.Options,
				P.Price,
				P.Brand,
				P.Quantity,
				P.ImageURL
			FROM Product P WHERE Name LIKE '%'+@Name+'%';
		END
END
GO
PRINT N'Creating [dbo].[USP_InsertCategory]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertCategory]
	@Name varchar(50)
AS
BEGIN
	DECLARE @Id INT;
	select @Id = (SELECT COUNT(*) FROM Category)+1
	INSERT INTO Category values( @Id , @Name);
	SELECT MAX(Id) from Category;
END
GO
PRINT N'Creating [dbo].[USP_InsertOrderStatusTable]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertOrderStatusTable]
	@Status varchar(20)
AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT COUNT(*) from OrderStatus)+1;
	INSERT into OrderStatus values (@Id,@Status);
	select Max(Id) from OrderStatus;
END
GO
PRINT N'Creating [dbo].[USP_InsertProduct]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertProduct]	
	@SubCategoryId INT,
	@Name varchar(100),
	@Description nvarchar(1000),
	@Specification nvarchar(MAX),
	@Options nvarchar(MAX),
	@Price DECIMAL(10,2),
	@Brand varchar(50),
	@IsActive int,
	@Quantity int,
	@ImageURL varchar(200)

AS
BEGIN
	DECLARE @Id INT;
	set @Id = (SELECT COUNT(*) from Product)+1;
	INSERT into Product values (@Id,@SubCategoryId,@Name,@Description,@Specification,@Options,@Price,@Brand,@IsActive,@Quantity,@ImageURL);
	select Max(Id) from Product;
END
GO
PRINT N'Creating [dbo].[USP_InsertSubCategory]...';


GO
CREATE PROCEDURE [dbo].[USP_InsertSubCategory]
	@CategoryId INT,
	@Name varchar(100)
AS
BEGIN
	DECLARE @Id INT,@Count INT;
	set @Id = (select COUNT(*) from SubCategory)+1;
	INSERT INTO SubCategory values( @Id , @CategoryId, @Name);
	select Max(Id) from SubCategory
END
GO
PRINT N'Creating [dbo].[USP_ModifyOrderStatusTable]...';


GO
CREATE PROCEDURE [dbo].[USP_ModifyOrderStatusTable]
	@Id INT,
	@Status varchar(20)

AS
BEGIN
	UPDATE OrderStatus set Status = @Status where Id = @Id;
	SELECT Id from OrderStatus where Id = @Id;
END
GO
PRINT N'Creating [dbo].[USP_PlaceOrder]...';


GO
CREATE PROCEDURE [dbo].[USP_PlaceOrder]
	@CustomerId INT,
	@AddressId INT,
	@ProductId INT,
	@Quantity INT,
	@Price MONEY,
	@OrderStatusId INT

AS
BEGIN
	DECLARE @OrderId INT, @OrderDetailsId INT,@CurrentDate DATETIME;
	set @OrderId = (SELECT COUNT(*) from Orders)+1;
	set @CurrentDate = (Select CONVERT(varchar,GETDATE(),103) as [DD/MM/YYYY]);
	INSERT into Orders(Id,CustomerId,AddressId,DateOfOrder,OrderStatusId) values (@OrderId,@CustomerId,@AddressId,@CurrentDate,@OrderStatusId)
END
GO
PRINT N'Creating [dbo].[USP_RemoveCartItems]...';


GO
CREATE PROCEDURE [dbo].[USP_RemoveCartItems]
	@Id INT
AS
BEGIN
	DECLARE @CartCount INT;

	set @CartCount = (SELECT COUNT(*) from Cart);

	DELETE from Cart WHERE Id = @Id;

	while(@Id <= @CartCount)
	BEGIN
	UPDATE Cart set Id = @Id WHERE Id = @Id+1;
	set @Id = @Id + 1;
	END

END
GO
PRINT N'Creating [dbo].[USP_UpdateCartQuantity]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateCartQuantity]
	@Id INT,
	@Quantity INT
AS
BEGIN
	DECLARE @CartProductCount INT,@StockCount INT,@CartCount INT;
	set @CartProductCount = (SELECT Quantity from Cart WHERE Id = @Id);
	set @StockCount = (SELECT P.Quantity from Product P JOIN Cart C on P.Id = C.ProductId  where C.Id  = @Id);


	IF(@CartProductCount = @StockCount)
	BEGIN
		RETURN @CartProductCount;
	END

	IF(@Quantity > @CartProductCount)
	BEGIN
		UPDATE Cart set Quantity = Quantity + 1 WHERE Id = @Id;
		UPDATE Cart set Price = 
		(SELECT P.Price from Product P JOIN Cart C on P.Id = C.ProductId where C.Id = @Id) * 
		(SELECT Quantity from Cart where Id = @Id);
		SELECT Quantity from Cart WHERE Id = @Id;
	END

	IF(@Quantity < @CartProductCount)
	BEGIN
		IF((SELECT Quantity from Cart WHERE Id = @Id)=1)
		DELETE FROM Cart WHERE Id = @Id;
		set @CartProductCount = @Id;
		set @CartCount = (SELECT COUNT(*) from Cart)
		WHILE(@CartProductCount <= @CartCount)
			BEGIN
				UPDATE Cart set Id = @CartProductCount WHERE Id = @CartProductCount +1;
				set @CartProductCount = @CartProductCount +1;
			END
		RETURN 0
		END
		ELSE IF((SELECT Quantity from Cart WHERE Id = @Id)>1)
		BEGIN
			UPDATE Cart set Quantity = Quantity - 1 WHERE Id = @Id;
			SELECT Quantity from Cart WHERE Id = @Id;
		END
	END


RETURN 0
GO
PRINT N'Creating [dbo].[USP_UpdateProductDetails]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateProductDetails]
	@Id INT,
	@SubCategoryName varchar(50),
	@Name varchar(100),
	@Description nvarchar(1000),
	@Specification nvarchar(MAX),
	@Options nvarchar(MAX),
	@Price DECIMAL(10,2),
	@Brand varchar(50),
	@IsActive int,
	@Quantity int,
	@ImageURL varchar(200)
AS
BEGIN
	DECLARE @SubCategoryId INT;
	set @SubCategoryId = (SELECT Id from SubCategory where Name = @SubCategoryName);
	UPDATE Product 
			set SubCategoryId = @SubCategoryId,
				Name = @Name,
				Description = @Description,
				Specification = @Specification,
				Options = @Options,
				Price = @Price,
				Brand =@Brand,
				IsActive = @IsActive,
				Quantity=@Quantity,
				ImageURL= @ImageURL
			WHERE Id = @Id;
			SELECT Id from Product where Id = @Id;
END
GO
PRINT N'Creating [dbo].[USP_UpdateShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateShippingAddress]
	@Id INT,
	@CustomerId INT,
	@Mobile varchar(15),
	@Street varchar(100),
	@LandMark varchar(100),
	@City varchar(30), 
	@State varchar(30), 
	@Zipcode varchar(10)
AS
BEGIN
	UPDATE ShippingAddress
		set CustomerId = @CustomerId,
			Mobile = @Mobile,
			Street = @Street,
			LandMark = @LandMark,
			City = @City,
			State =@State,
			Zipcode = @Zipcode
			WHERE 
			Id = @Id;
	select Id from ShippingAddress where Id = @Id;
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
