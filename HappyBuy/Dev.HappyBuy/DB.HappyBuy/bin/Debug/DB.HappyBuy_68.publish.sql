/*
Deployment script for DB.HappyBuy

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB.HappyBuy"
:setvar DefaultFilePrefix "DB.HappyBuy"
:setvar DefaultDataPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\ahamed.thamimul\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Cart]...';


GO
CREATE TABLE [dbo].[Cart] (
    [Id]         VARCHAR (20)   NOT NULL,
    [CustomerId] VARCHAR (30)   NULL,
    [ProductId]  VARCHAR (50)   NULL,
    [TotalPrice] NVARCHAR (MAX) NULL,
    [Quantity]   INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]   VARCHAR (10) NOT NULL,
    [Name] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [Id]        VARCHAR (30)  NOT NULL,
    [FirstName] VARCHAR (50)  NULL,
    [LastName]  VARCHAR (50)  NULL,
    [Mobile]    VARCHAR (15)  NULL,
    [Email]     VARCHAR (30)  NULL,
    [Password]  VARCHAR (30)  NULL,
    [Street]    VARCHAR (100) NULL,
    [LandMark]  VARCHAR (100) NULL,
    [City]      VARCHAR (30)  NULL,
    [State]     VARCHAR (30)  NULL,
    [Zipcode]   VARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [Id]           VARCHAR (30) NOT NULL,
    [Quantity]     INT          NULL,
    [Price]        INT          NULL,
    [DateOrdered]  VARCHAR (15) NULL,
    [DateReceived] VARCHAR (15) NULL,
    [Status]       VARCHAR (20) NULL,
    [CustomerId]   VARCHAR (30) NULL,
    [PaymentId]    VARCHAR (30) NULL,
    [ProductId]    VARCHAR (50) NULL,
    [AddressId]    VARCHAR (10) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Payment]...';


GO
CREATE TABLE [dbo].[Payment] (
    [Id]            VARCHAR (30) NOT NULL,
    [CustomerId]    VARCHAR (30) NULL,
    [PaymentMode]   VARCHAR (20) NULL,
    [AmountPaid]    VARCHAR (20) NULL,
    [DateOfPayment] VARCHAR (15) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Id]            VARCHAR (50)   NOT NULL,
    [SubCategoryId] VARCHAR (30)   NULL,
    [Name]          VARCHAR (100)  NULL,
    [Description]   NVARCHAR (MAX) NULL,
    [Specification] NVARCHAR (MAX) NULL,
    [Options]       NVARCHAR (MAX) NULL,
    [Price]         NVARCHAR (50)  NULL,
    [Brand]         VARCHAR (50)   NULL,
    [IsActive]      INT            NULL,
    [Quantity]      INT            NULL,
    [ImageURL]      VARCHAR (200)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ShippingAddress]...';


GO
CREATE TABLE [dbo].[ShippingAddress] (
    [Id]         VARCHAR (10)  NOT NULL,
    [CustomerId] VARCHAR (30)  NULL,
    [Mobile]     VARCHAR (15)  NULL,
    [Street]     VARCHAR (100) NULL,
    [LandMark]   VARCHAR (100) NULL,
    [City]       VARCHAR (30)  NULL,
    [State]      VARCHAR (30)  NULL,
    [Zipcode]    VARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Stock]...';


GO
CREATE TABLE [dbo].[Stock] (
    [Id]        VARCHAR (50) NULL,
    [ProductId] VARCHAR (50) NULL,
    [Quantity]  INT          NULL
);


GO
PRINT N'Creating [dbo].[SubCategory]...';


GO
CREATE TABLE [dbo].[SubCategory] (
    [Id]         VARCHAR (30)  NOT NULL,
    [CategoryId] VARCHAR (10)  NULL,
    [Name]       VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Cart]...';


GO
ALTER TABLE [dbo].[Cart]
    ADD FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([PaymentId]) REFERENCES [dbo].[Payment] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Orders]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[ShippingAddress] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Payment]...';


GO
ALTER TABLE [dbo].[Payment]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD FOREIGN KEY ([SubCategoryId]) REFERENCES [dbo].[SubCategory] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[ShippingAddress]...';


GO
ALTER TABLE [dbo].[ShippingAddress]
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Stock]...';


GO
ALTER TABLE [dbo].[Stock]
    ADD FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[SubCategory]...';


GO
ALTER TABLE [dbo].[SubCategory]
    ADD FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating [dbo].[sp_AddCart]...';


GO
CREATE PROCEDURE [dbo].[sp_AddCart]
		@CustomerId varchar (30),
		@ProductName varchar(100),
		@Quantity int
AS
BEGIN
	declare @Id varchar(10),@TempId int, @Count int,@ProductCount int,
	@ProductId varchar(50),@TotalPrice nvarchar(50),@TempPrice int;

	set @Count = (select count(*) from Cart)+1;
	set @Id = 'CR' + (FORMAT(@Count,'0000'))

	set @ProductId = (select Id from Product where Name = @ProductName);
	set @ProductCount = (select COUNT(*) from Cart where CustomerId = @CustomerId 
	AND ProductId = @ProductId);

	set @TotalPrice = (select Price from Product where Id = @ProductId);	

	IF(@ProductCount > 0)
	BEGIN
		UPDATE Cart set Quantity += @Quantity where ProductId = @ProductId;
		set @TempPrice = (SELECT CAST(@TotalPrice as int));
		set @TempPrice = @TempPrice * (select Quantity from Cart where ProductId = @ProductId);

		declare @money money = @TempPrice;
		set @TotalPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		UPDATE Cart set TotalPrice = @TotalPrice where ProductId = @ProductId;
	END
	ELSE IF (@ProductCount < 1)
	BEGIN
		INSERT INTO Cart values(@Id, @CustomerId,@ProductId,@TotalPrice,@Quantity)
	END
END
GO
PRINT N'Creating [dbo].[sp_AddShippingAddress]...';


GO
CREATE PROCEDURE [dbo].[sp_AddShippingAddress]
		@CustomerId varchar (30),
		@Mobile varchar(15),
		@Street varchar(100),
		@LandMark varchar(100),
		@City varchar(30), 
		@State varchar(30), 
		@Zipcode varchar(10)
AS
BEGIN
	declare @Id varchar(10),@Count int
	set @Count = (select count(*) from ShippingAddress)+1;
	set @Id = 'SA' + (FORMAT(@Count,'0000'));
	INSERT into ShippingAddress values(@Id,@CustomerId,@Mobile,@Street,@landMark,@City,@State,@Zipcode);
END
GO
PRINT N'Creating [dbo].[sp_CustomerRegistration]...';


GO
CREATE PROCEDURE [dbo].[sp_CustomerRegistration]
	@Firstname varchar(50),
	@Lastname varchar(50),
	@Mobile varchar(15),
	@Email varchar(30),
	@Password varchar(30),
	@Street varchar(100),
	@Landmark varchar(100),
	@City varchar(30),
	@State varchar(30),
	@Zipcode varchar(10)
AS
BEGIN

declare @Id varchar(30),@TempId varchar(30), @Count int
set @Count = (select count(*) from Customer)+1;
set @TempId = (FORMAT(@Count,'000000000'));
set @Id = 'HBCUS' + @TempId;
	insert  Customer values 
	(@Id,@Firstname,@Lastname,@Mobile,@Email,@Password,@Street,@Landmark,@City,@State,@Zipcode)
END
GO
PRINT N'Creating [dbo].[sp_GetCustomerDetails]...';


GO
CREATE PROCEDURE [dbo].[sp_GetCustomerDetails]
	@Id varchar(10)
AS
BEGIN
	SELECT * FROM Customer where Id = @Id
END
GO
PRINT N'Creating [dbo].[sp_GetProductDetails]...';


GO
CREATE PROCEDURE [dbo].[sp_GetProductDetails]
	@Name varchar(300)
AS
BEGIN
	IF((SELECT COUNT(*) FROM Category WHERE Name LIKE '%'+@Name+'%') > 0)
		BEGIN
			select * from Product P join SubCategory SC on P.SubCategoryId = SC.Id 
			join Category C on SC.CategoryId = C.Id where C.Name  LIKE '%'+@Name+'%';
		END
	ELSE IF((SELECT COUNT(*) FROM SubCategory WHERE Name LIKE '%'+@Name+'%')>0)
		BEGIN
		select * from Product P join SubCategory SC on 
		P.SubCategoryId = SC.Id where SC.Name LIKE '%'+@Name+'%';
		END
	ELSE IF((SELECT COUNT(*) FROM Product WHERE Name LIKE '%'+@Name+'%')>0)
		BEGIN
		select * from Product P where Name LIKE '%'+@Name+'%';
		END
END
GO
PRINT N'Creating [dbo].[sp_InsertCategory]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertCategory]
	@Name varchar(50)
AS
BEGIN
	declare @Id varchar(10),@TempId int, @Count int;
	set @Count = (select count(*) from Category)+1;
	set @Id = 'CT' + (FORMAT(@Count,'0000'))
	INSERT INTO Category values( @Id , @Name);
END
GO
PRINT N'Creating [dbo].[sp_InsertProduct]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertProduct]
	@SubCategoryName varchar(50),
	@Name varchar(100),
	@Description nvarchar(MAX),
	@Specification nvarchar(MAX),
	@Options nvarchar(MAX),
	@Price nvarchar(50),
	@Brand varchar(50),
	@IsActive int,
	@Quantity int,
	@ImageURL varchar(200)

AS
BEGIN
	declare @money money = @Price, @TempSubCategoryId varchar(30),@Id varchar(50),
	@StockId varchar(50),@Count int, @TempPrice nvarchar(50),@ProductCount int
	set @TempSubCategoryId = (select Id from SubCategory where Name = @SubCategoryName)
	set @Count = (select count(*) from Product)+1;
	set @Id = 'P' + @TempSubCategoryId + 'SC' + (FORMAT(@Count,'00000'));
	set @ProductCount = (select count(1) from Product where Id = @Id)
	set @Count = (select count(*) from Stock)+1;
	set @StockId = 'SK' + (FORMAT(@Count,'00000'));

	IF(@ProductCount > 0)
	BEGIN
		set @TempPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		INSERT into Product values (@Id,@TempSubCategoryId,@Name,@Description,@Specification,@Options,@TempPrice,@Brand,@IsActive,@Quantity,@ImageURL);
		INSERT into Stock values (@StockId,@Id,@Quantity);
	END
	ELSE 
	BEGIN
		set @TempPrice = (SELECT FORMAT ( @money,'C', 'ta-IN'));
		UPDATE Product 
		set SubCategoryId = @TempSubCategoryId,
			Name = @Name,
			Description = @Description,
			Specification = @Specification,
			Options = @Options,
			Price = @TempPrice,
			Brand =@Brand,
			IsActive = @IsActive,
			Quantity=@Quantity,
			ImageURL= @ImageURL
		where Id = @Id;

		UPDATE Stock
		set ProductId = @Id,
			Quantity = @Quantity
		where 
			Id = @StockId;
	END
END
GO
PRINT N'Creating [dbo].[sp_InsertSubCategory]...';


GO
CREATE PROCEDURE [dbo].[sp_InsertSubCategory]
	@CategoryName varchar(50),
	@Name varchar(100)
AS
BEGIN
	declare @Id varchar(30),@Count int, @TempCategoryId varchar(10);
	set @Count = (select count(*) from SubCategory)+1;
	set @TempCategoryId = (select Id from Category where Name = @CategoryName);
	set @Id = @TempCategoryId + 'SC' + (FORMAT(@Count,'00000'))
	INSERT INTO SubCategory values( @Id , @TempCategoryId, @Name);
END
GO
PRINT N'Creating [dbo].[sp_MakePayment]...';


GO
CREATE PROCEDURE [dbo].[sp_MakePayment]
		@CustomerId varchar(30),
		@PaymentMode varchar(20),
		@AmountPaid nvarchar(30)
AS
BEGIN
	declare @Count int,@Datetime varchar(20),@Id varchar(30)
	set @Count = (select count(*) from Payment)+1;
	set @Id = 'PY' + (FORMAT(@Count,'0000'))
	set @Datetime = (select FORMAT (GETDATE(),'dd/MM/yyyy'))
	insert into Payment values(@Id,@CustomerId,@PaymentMode,@AmountPaid,@Datetime)
	select @Id;
END
GO
PRINT N'Creating [dbo].[sp_PlaceOrder]...';


GO
CREATE PROCEDURE [dbo].[sp_PlaceOrder]
		@Quantity int,
		@Price int,
		@DateOrdered datetime,
		@DateReceived datetime,
		@Status varchar(20),
		@CustomerId varchar (30),
		@PaymentId varchar(30),
		@ProductId varchar(50),
		@AddressId varchar(10)
AS
BEGIN
	declare @Id varchar(30),@Count int
	set @Count = (select count(*) from Orders)+1;
	set @Id = 'ORD' + (FORMAT(@Count,'000000'));
	INSERT into Orders values(@Id,@Quantity,@Price,@DateOrdered,@DateReceived,@Status,@CustomerId,@PaymentId,@ProductId,@AddressId);
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
